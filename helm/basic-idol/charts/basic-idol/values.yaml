###
# Copyright (c) 2019-2020 Micro Focus or one of its affiliates.
#
# Licensed under the MIT License (the "License"); you may not use this file
# except in compliance with the License.
#
# The only warranties for products and services of Micro Focus and its affiliates
# and licensors ("Micro Focus") are as may be set forth in the express warranty
# statements accompanying such products and services. Nothing herein should be
# construed as constituting an additional warranty. Micro Focus shall not be
# liable for technical or editorial errors or omissions contained herein. The
# information contained herein is subject to change without notice.
###

#This is where the default values are stored
deploymentApiVersion: apps/v1
serviceApiVersion: v1

maintainer: # complete in env.values
imagePullPolicy: IfNotPresent
idolVersion: # complete in env.values

licenseServer:
   ip: # complete in env.values
   hostname: idol-licenseserver

replicas: 1
livenessProbePath: /a=getpid
portProtocol: TCP

isIncluded:
  reverseProxy: false
  mmap: false
  documentSecurity: false

secret:
    apiVersion: v1
    name: docker-secret
    base64dockerconfigjson: # complete in env.values
    
content:
  x-content-port0: &content-port0 9100
  x-content-port1: &content-port1 9101
  name: idol-content
  deployment: idol-content-deployment
  image: content
  ports:
    - name: aci-port
      service: *content-port0
      container: *content-port0
      host: *content-port0
    - name: index-port
      service: *content-port1
      container: *content-port1
      host: *content-port1
      
agentstore:
  x-agentstore-port0: &agentstore-port0 9050
  x-agentstore-port1: &agentstore-port1 9051
  name: idol-agentstore
  deployment: idol-agentstore-deployment
  image: agentstore
  ports:
    - service: *agentstore-port0
      container: *agentstore-port0
      host: *agentstore-port0 
    - container: *agentstore-port1
      host: *agentstore-port1
      
categorisationAgentstore:
  #port0 is always the livenessProbe port
  x-categorisation-agentstore-port0: &categorisation-agentstore-port0 9182 
  x-categorisation-agentstore-port1: &categorisation-agentstore-port1 9181
  x-categorisation-agentstore-port2: &categorisation-agentstore-port2 9183
  name: idol-categorisation-agentstore
  deployment: idol-categorisation-agentstore-deployment
  image: categorisation-agentstore
  ports:
    - service: *categorisation-agentstore-port0
      container: *categorisation-agentstore-port0
      host: *categorisation-agentstore-port0
    - container: *categorisation-agentstore-port1
      host: *categorisation-agentstore-port1
    - container: *categorisation-agentstore-port2
      host: *categorisation-agentstore-port2
      
community:
  x-community-port0: &community-port0 9030
  x-community-port1: &community-port1 9032
  name: idol-community
  deployment: idol-community-deployment
  image: community
  ports:
    - name: aci-port
      service: *community-port0
      container: *community-port0
      host: *community-port0
    - name: service-port
      service: *community-port1
      container: *community-port1
      host: *community-port1
      
view:
  x-view-port0: &view-port0 9080
  name: idol-view
  deployment: idol-view-deployment
  image: view
  ports:
    - service: *view-port0
      container: *view-port0
      host: *view-port0
      
find:
  x-find-port0: &find-port0 8000
  name: idol-find
  deployment: idol-find-deployment
  image: find
  env:
    - name: IDOL_UI_CFG
      value: config_basic.json
  ports:
    - service: *find-port0
      container: *find-port0
      host: *find-port0
      livenessProbePath: /

#NiFi does not use lists, but rather names each environment variable, volume, and port, which I feel could be more manageable    
nifi:
  x-nifi-port0: &nifi-port0 8081
  x-nifi-port1: &nifi-port1 11000
  name: idol-nifi
  deployment: idol-nifi-deployment
  image: nifi-minimal #choose nifi-minimal or nifi-full
  env:
    webProxyContextPath:
      name: NIFI_WEB_PROXY_CONTEXT_PATH
      value: /idol-nifi
    webHttpPort:
      name: NIFI_WEB_HTTP_PORT
      value: *nifi-port0
  volumes:
    ingest:
      name: ingest-volumes
      mountPath: /idol-ingest
    flow:
      name: nifi-flow-mount
      mountPath: /opt/nifi/flow/this_flow.xml
      subPath: basic.xml
      configMap: nifi-basic-flow
    processedVideo:
      name: &mediaserver-processed-video-name mediaserver-processed-video
      mountPath: &mediaserver-processed-video-mountpath /processed-video
  ports:
    ui:
      name: ui-port
      service: *nifi-port0
      container: *nifi-port0
      host: 8001
      livenessProbePath: /nifi/
    connectorAci:
      name: connector-aci-port
      service: *nifi-port1
      container: *nifi-port1
  
reverseProxy:
  x-reverseproxy-port0: &reverseproxy-port0 8080
  name: reverse-proxy
  deployment: reverse-proxy-deployment
  image: httpd:2.4
  volumes:
    - name: httpd-conf-mount
      mountPath: /usr/local/apache2/conf/httpd.conf
      subPath: httpd.conf
      configMap: reverse-proxy-httpd
  ports:
    - service: *reverseproxy-port0
      container: *reverseproxy-port0
      host: *reverseproxy-port0
      livenessProbePath: /find

mmapMediaserver:
  x-mediaserver-port0: &mediaserver-port0 14000
  x-mediaserver-port1: &mediaserver-port1 14001
  name: idol-mediaserver
  image: mediaserver-enus
  volumes:
    processedVideo:
      #defined under nifi.volumes
      name: *mediaserver-processed-video-name
      mountPath: *mediaserver-processed-video-mountpath
  ports:
    aci:
      name: aci-port
      service: *mediaserver-port0
      container: *mediaserver-port0
      host: *mediaserver-port0
    index:
      name: index-port
      service: *mediaserver-port1
      container: *mediaserver-port1
      host: *mediaserver-port1

mmapPlaylistserver:
  x-mediaserver-port0: &playlistserver-port0 24000
  name: idol-mmap-playlistserver
  image: mediaserver-playlistserver
  volumes:
    staticVideo:
      name: &static-video-name static-video
      mountPath: &static-video-mountpath /mmap/data/static-video/final
  ports:
    #not sure if this is a suitable name for this port
    aci:
      service: *playlistserver-port0
      container: *playlistserver-port0
      host: *playlistserver-port0

mmapApp:
  x-mediaserver-port0: &mmap-port0 8080
  x-mediaserver-port1: &mmap-port1 8009
  name: idol-mmap-app
  image: mmap_app
  env:
    postgres:
      name: MMAP_POSTGRES_PASSWORD
      value: &mmap-postgres-pw ieBPwmujrKEY9sh6oaybA8wyf
  volumes:
    staticVideo:
      #defined under mmapPlaylistserver.volumes
      name: *static-video-name
      mountPath: *static-video-mountpath
    processedVideo:
      #defined under nifi.volumes
      name: *mediaserver-processed-video-name
      mountPath: /mmap/input-data/static-video
    items:
      name: items
      mountPath: /mmap/data/items
  ports:
    ui:
      name: ui-port
      service: *mmap-port0
      container: *mmap-port0
      host: 8002
      livenessProbePath: /
    ajp:
      name: ajp-port
      service: *mmap-port1
      container: *mmap-port1
      host: *mmap-port1
    ssl:
      name: ssl-port
      container: 8443
      host: 8444

mmapDb:
  x-mmap-db-port0: &mmap-db-port0 5432
  name: idol-mmap-postgres
  deployment: idol-mmap-postgres-deployment
  image: postgres:11-alpine
  env:
    postgresDb:
      name: POSTGRES_DB
      value: mmap-events
    postgresUser:
      name: POSTGRES_USER
      value: mmap
    postgresPw:
      name: POSTGRES_PASSWORD
      value: *mmap-postgres-pw
  volumes:
    events:
      name: events
      mountPath: /var/lib/postgresql/data
    initdb:
      name: initdb-mount
      mountPath: /docker-entrypoint-initdb.d
      configMap: mmap-postgres-initdb
  ports:
    postgres:
      name: mmap-postgres
      service: *mmap-db-port0
      container: *mmap-db-port0

omnigroupserver:
  x-omnigroupserver-port0: &omnigroupserver-port0 3057
  x-omnigroupserver-port1: &omnigroupserver-port1 3058
  name: idol-omnigroupserver
  deployment: idol-omnigroupserver-deployment
  image: omnigroupserver
  idolVersion: 12.6 #this tends to be behind the general idol version
  ports:
    - name: aci-port
      service: *omnigroupserver-port0
      container: *omnigroupserver-port0
      host: *omnigroupserver-port0
    - name: service-port
      service: *omnigroupserver-port1
      container: *omnigroupserver-port1
      host: *omnigroupserver-port1
  volumes:
    cfg:
      name: omnigroupserver-cfg-mount
      mountPath: /omnigroupserver/omnigroupserver.cfg
      subPath: omnigroupserver.cfg
      configMap: omnigroupserver-config
    aes:
      name: omnigroupserver-aes-mount
      mountPath: /omnigroupserver/aes.key
      subPath: aes.key
      configMap: omnigroupserver-aes
