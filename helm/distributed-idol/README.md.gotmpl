<!--
BEGIN COPYRIGHT NOTICE
Copyright 2022 - 2023 Open Text.

The only warranties for products and services of Open Text and its affiliates and licensors (“Open Text”) are as may be set forth in the express warranty statements accompanying such products and services. Nothing herein should be construed as constituting an additional warranty. Open Text shall not be liable for technical or editorial errors or omissions contained herein. The information contained herein is subject to change without notice.
END COPYRIGHT NOTICE
-->
{{ template "chart.header" . -}}<!-- omit in toc -->
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{- $appVersion := .AppVersion }}
{{- $versionList := slice (splitList "." $appVersion) 0 2 }}

{{- $contentDocsLink := printf "https://www.microfocus.com/documentation/idol/IDOL_%s/%s_%s_Documentation/Help/" (join "_" $versionList ) "Content" (join "." $versionList) }}
{{- $dahDocsLink := printf "https://www.microfocus.com/documentation/idol/IDOL_%s/%s_%s_Documentation/Help/" (join "_" $versionList ) "DAH" (join "." $versionList) }}
{{- $dihDocsLink := printf "https://www.microfocus.com/documentation/idol/IDOL_%s/%s_%s_Documentation/Help/" (join "_" $versionList ) "DIH" (join "." $versionList) }}

- [Overview](#overview)
- [Prerequisites](#prerequisites)
- [Helm Chart Values](#helm-chart-values)
  - [Required Values](#required-values)
  - [Required Secrets](#required-secrets)
  - [Optional Values](#optional-values)
- [Cluster requirements](#cluster-requirements)
  - [Ingress Controller](#ingress-controller)
  - [Storage Classes and Persistent Volumes](#storage-classes-and-persistent-volumes)
    - [backupArchiveStorageClass](#backuparchivestorageclass)
  - [metrics-server](#metrics-server)
- [Install](#install)
- [Endpoints](#endpoints)
- [Upgrading IDOL version](#upgrading-idol-version)
- [Uninstall](#uninstall)
- [Requirements](#requirements)
- [Values](#values)

## Overview

A [Helm](https://helm.sh/) chart for managing deployments of distributed IDOL systems in a Kubernetes cluster.

This chart deploys a DAH, DIH, and a set of Content engines that can autoscale with demand. 
The chart can deploy in mirror-mode (autoscaling to fulfil query demand) or in non-mirror mode 
(autoscaling to fulfil index demand) depending on the `setupMirrored` helm value. 
The default is non-mirror mode.

> Full documentation for the IDOL components is available from
> - {{ $contentDocsLink }}
> - {{ $dahDocsLink }}
> - {{ $dihDocsLink }}

## Prerequisites

- A Kubernetes cluster satisfying the [cluster requirements](#cluster-requirements)
- The `helm` command line tool
- The `kubectl` command line tool

## Helm Chart Values

The [values.yaml](values.yaml) file provides configuration options for this chart.
Documentation for the values is located in that file.
Some important values are described in more detail below, and a [full reference](#values) is at the end of this README.

### Required Values

There are some values that are required but do not have defaults. The user of this Helm chart must provide these values via either the
`--set`/`--set-file`/`--set-string` or `--values` flags in helm commands:

- `licenseServerIp`: the IP address of the LicenseServer containing the license key required to run the IDOL components in this chart.
- `licenseServerPort`: the port of the LicenseServer containing the license key required to run the IDOL components in this chart.

### Required Secrets

- `dockerhub-secret` : for pulling images from Docker Hub

By default the Helm chart is configured to pull images from Docker Hub and expects a Kubernetes secret called `dockerhub-secret` to be created.
This secret must contain the credentials required to pull images from Docker Hub. For example (substituting appropriate values for username
and API token):

```sh
kubectl create secret docker-registry dockerhub-secret 
    --docker-username=${DOCKERHUB_USER} 
    --docker-password=${DOCKERHUB_APITOKEN}
```

In practice (at present), access to the IDOL images on dockerhub is restricted to the user `microfocusidolreadonly`, so this will be the
value of `${DOCKERHUB_USER}` in the example.

If a different name is required for this Kubernetes secret, override the `imagePullSecrets` list value.

### Optional Values

There are some values that are optional or sometimes overriden:

- `httpProxy`: the URL of a HTTP proxy that the installation will have to use to access the external internet. If not set, no http proxying
  is configured.
- If a private repository is specified for pulling the IDOL images (i.e. by overriding `idolImageRegistry`) then `imagePullSecrets` will also
  require the name of a Kubernetes secret holding the credentials for pulling from this private repository.

## Cluster requirements

### Ingress Controller

The cluster must provide an [IngressController](https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/). For example on 
a [minikube](https://minikube.sigs.k8s.io/docs/) cluster, you can [enable an NGINX controller](https://kubernetes.io/docs/tasks/access-application-cluster/ingress-minikube/)
and see the exposed address using `kubectl get ingress`.

By default the chart is setup ingress for `nginx`. If you are deploying on OpenShift/OKD then you should set `ingressType=haproxy` and specify
your `ingressHost`.

### Storage Classes and Persistent Volumes

This system uses [Storage Classes](https://kubernetes.io/docs/concepts/storage/storage-classes/#introduction) to provide 
[Persistent Volumes](https://kubernetes.io/docs/concepts/storage/persistent-volumes/) as persistent storage for the DIH and Content components.

> Note: uninstalling does not delete the PersistentVolumeClaims. If you redeploy the helm chart, it reuses any existing PV or PVCs.

| [values.yaml](values.yaml)               | default value              | purpose
| ---                       | ---                        | --- |
| contentStorageClass       | idol-content-storage-class | Content component index and configuration |
| dihStorageClass           | idol-dih-storage-class     | DIH component data and configuration |
| backupArchiveStorageClass | idol-backup-archive-sc     | mirror-mode Content backups. See [backupArchiveStorageClass](#backuparchivestorageclass) |

#### backupArchiveStorageClass

In mirror-mode, the cluster must provide a storage class (named "idol-backup-archive-sc" by default) that can provision a PersistentVolume with
`ReadWriteMany` access mode and `contentVolumeSize` space (see the "backup-archive-pvc" PersistentVolumeClaim). One Content engine is designated
as the "primary" Content engine (running in the StatefulSet named "idol-content-primary" by default). This PersistentVolume is where the primary
Content engine stores index commands and backups so that new Content mirrors can quickly initialize. Note that while most volume providers support the `ReadWriteOnce` access mode required by the Content indexes, the `ReadWriteMany` mode has more limited support - see [this table](https://kubernetes.io/docs/concepts/storage/persistent-volumes/#access-modes) for one overview.

### metrics-server

The cluster must satisfy the requirements of the [metrics-server](https://github.com/kubernetes-sigs/metrics-server) deployment. For example,
Kubelet certificates need to be signed by the cluster certificate authority

## Install

After you satifsy the requirements, build the dependencies with
`helm dependency build`

Then you can install the chart by using 'helm install'. For example, from this directory, using a name of 'idolrelease' for the release:

```sh
helm install -f values.yaml 
    --set licenseServerIp=<license server ip> 
    --set-string licenseServerPort=<license server port> idolrelease .
```

## Endpoints

After you have deployed the helm chart, you can access the following endpoints through ingress:

- `http://<ingress address>/dah/` - The DAH ACI port
- `http://<ingress address>/dih/` - The DIH ACI port
- `http://<ingress address>/index/` - The DIH index port
  
You can optionally expose individual Content engine ACI ports at `http://<ingress address>/content-N/` - see `exposedContents` in
[values.yaml](values.yaml)

## Upgrading IDOL version

To upgrade to a newer version of IDOL, use a `helm upgrade` command. Note that you must provide the number of Content engines currently
deployed. For example:

```sh
helm upgrade --reuse-values 
    --set-string idolVersion=<new_version>
    --set-string initialContentEngineCount=<current engine count>
    --set-string autoscalingMinReplicas=<current engine count>
    <release name> <dir containing helm chart>
```

This example redeploys new versions of the DAH, DIH, and Content, which replace the existing ones.

## Uninstall

Use `helm uninstall`

```sh
helm uninstall <release_name>
```

If you no longer require the PVCs, you can manually delete them:

```sh
# delete individually
kubectl delete pvc <pvc_name>
# or delete all matching by label
kubectl delete pvc --selector app.kubernetes.io/instance=<release_name>
```

{{ template "chart.homepageLine" . }}

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}

{{ template "chart.requirementsSection" . }}

{{ template "chart.valuesSection" . }}

{{ template "helm-docs.versionFooter" . }}