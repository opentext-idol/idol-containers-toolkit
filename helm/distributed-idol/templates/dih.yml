# BEGIN COPYRIGHT NOTICE
# (c) Copyright 2022 Micro Focus or one of its affiliates.
# END COPYRIGHT NOTICE
{{- if and (.Values.autoscalingEnabled) (not .Values.setupMirrored) }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: dih-prometheus-exporter-python
  labels: {{- include "distributedidol.labels" . | nindent 4 }}
data:
  dih_prometheus_exporter.py: |
{{ tpl (.Files.Get "resources/dih_prometheus_exporter.py") . | indent 4 }}
  requirements.txt: |
    requests==2.22.0
    prometheus_client==0.7.1
---
{{- end }}
apiVersion: v1
kind: Service
metadata:
  # Use this service for generic IDOL index port functionality
  # Could point to e.g. a DIH or Content instance
  name: {{ .Values.indexserviceName }}
  labels: {{- include "distributedidol.labels" . | nindent 4 }}
spec:
  ports:
  - port: {{ (index .Values.dihPorts 0).service | int }}
    targetPort: {{ (index .Values.dihPorts 0).name }}
    name: {{ (index .Values.dihPorts 0).name }}
  - port: {{ (index .Values.dihPorts 1).service | int }}
    targetPort: {{ (index .Values.dihPorts 1).name }}
    name: {{ (index .Values.dihPorts 1).name }}
  - port: {{ (index .Values.dihPorts 2).service | int }}
    targetPort: {{ (index .Values.dihPorts 2).name }}
    name: {{ (index .Values.dihPorts 2).name }}
  selector:
    app: {{ .Values.dihDeployment }}
---
apiVersion: v1
kind: Service
metadata:
  # Use this service for DIH-specific functionality, e.g. enginemanagement
  # Also expose the metrics port of the prometheus-exporter container
  name: {{ .Values.dihName }}
  labels: {{- include "distributedidol.labels" . | nindent 4 }}
    app: {{ .Values.dihName }}
spec:
  ports:
  - port: {{ (index .Values.dihPorts 0).service | int }}
    targetPort: {{ (index .Values.dihPorts 0).name }}
    name: {{ (index .Values.dihPorts 0).name }}
  - port: {{ (index .Values.dihPorts 1).service | int }}
    targetPort: {{ (index .Values.dihPorts 1).name }}
    name: {{ (index .Values.dihPorts 1).name }}
  - port: {{ (index .Values.dihPorts 2).service | int }}
    targetPort: {{ (index .Values.dihPorts 2).name }}
    name: {{ (index .Values.dihPorts 2).name }}
  - port: {{ .Values.dihPrometheusPort | int }}
    targetPort: {{ .Values.dihPrometheusPortName }}
    name: {{ .Values.dihPrometheusPortName }}
  selector:
    app: {{ .Values.dihDeployment }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.dihDeployment }}
  labels: {{- include "distributedidol.labels" . | nindent 4 }}
spec:
  serviceName: {{ .Values.dihName | quote }}
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.dihDeployment }}
  template:
    metadata:
      labels: {{- include "distributedidol.labels" . | nindent 8 }}
        app: {{ .Values.dihDeployment }}
    spec:
      setHostnameAsFQDN: true
      initContainers:
      - name: edit-config
        # Use this version of busybox so nslookup output format is stable
        image: busybox:1.28
        imagePullPolicy: IfNotPresent
        env:
        - name: IDOL_CONTENT_SERVICE_PORT_ACI_PORT
          # This doesn't seem to be set by our headless service
          value: {{ (index .Values.contentPorts 0).container | quote }}
        command:
        - sh
        - "-c"
        - |
{{ tpl (.Files.Get "resources/dih_init.sh") . | indent 10 }}
        volumeMounts:
        - name: config-map
          mountPath: /mnt/config-map
        - name: dih-persistent-storage
          mountPath: /mnt/store/dih
      imagePullSecrets:
        {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
        {{- end }}
      containers:
      - name: {{ .Values.dihName }}
        image: {{ .Values.idolImageRegistry }}/{{ .Values.dihImage }}:{{ .Values.idolVersion }}
        imagePullPolicy: IfNotPresent
        command: ["/bin/sh"]
        args: 
        - -c
        - |
          cd /dih
          ln -sf /opt/idol/dih/data ./data
          if [ -e /opt/idol/dih/data/dih.cfg ]
          then
            echo Using existing dih.cfg
          else
            cp /opt/idol/dih/data/dih.install.cfg /opt/idol/dih/data/dih.cfg
          fi
          ln -sf /opt/idol/dih/data/dih.cfg ./dih.cfg
          ./run_idol.sh
        
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/bash
              - "-c"
              - |
{{ tpl (.Files.Get "resources/dih_preStop.sh") . | indent 16 }}
        volumeMounts:
        - name: dih-persistent-storage
          mountPath: /opt/idol/dih/data
        env:
        - name: IDOL_COMPONENT_CFG
          # Override default in newer IDOL containers
          value: "/dih/dih.cfg"
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessProbePath }}
            port: {{ (index .Values.dihPorts 0).container | int }}
{{- template "distributedidol.deployment.standardLivenessProbe" }}
        ports:
        - containerPort: {{ (index .Values.dihPorts 0).container | int }}
          name: {{ (index .Values.dihPorts 0).name }}
          protocol: TCP
        - containerPort: {{ (index .Values.dihPorts 1).container | int }}
          name: {{ (index .Values.dihPorts 1).name }}
          protocol: TCP
        - containerPort: {{ (index .Values.dihPorts 2).container | int }}
          name: {{ (index .Values.dihPorts 2).name }}
          protocol: TCP
{{- /*
 Exporter monitors child fullness - unused in mirrored setup 
*/}}
{{- if and (.Values.autoscalingEnabled) (not .Values.setupMirrored) }}
      - name: prometheus-exporter
        image: python:3.11
{{- if .Values.httpProxy }}
        envFrom:
          - configMapRef:
              name: http-proxy-config
{{- end }}
        imagePullPolicy: IfNotPresent
        workingDir: /usr/src/app
        command: ["/bin/sh"]
        args: ["-c", "mkdir -p /usr/src/app && 
          echo \"Copying files\" && 
          cp /mnt/python/* /usr/src/app && 
          cd /usr/src/app && 
          echo \"Installing\" &&
          pip install --no-cache-dir -r requirements.txt &&
          echo \"Running\" &&
          python dih_prometheus_exporter.py"]
        volumeMounts:
        - name: dih-prometheus-exporter-python
          mountPath: /mnt/python
        - name: python-src-app
          mountPath: /usr/src/app
        - name: python-local
          mountPath: /.local
        ports:
        - containerPort: {{ .Values.dihPrometheusPort | int }}
          name: {{ .Values.dihPrometheusPortName }}
          protocol: TCP
{{- end }}
      volumes:
      - name: config-map
        configMap:
          name: idol-config
{{- if and (.Values.autoscalingEnabled) (not .Values.setupMirrored) }}
      - name: dih-prometheus-exporter-python
        configMap:
          name: dih-prometheus-exporter-python
      - name: python-src-app  # working directory for exporter
        emptyDir: {}
      - name: python-local  # for pip downloads
        emptyDir: {}
{{- end }}
  volumeClaimTemplates:
  - metadata:
      name: dih-persistent-storage
      labels: {{- include "distributedidol.labels" . | nindent 8 }}
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ .Values.dihStorageClass }}
      resources:
        requests:
          storage: 1Gi